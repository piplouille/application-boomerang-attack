# Laetitia Debesse, Sihem Mesnager, Mounira Msahli, 2020-2021

import numpy as np

# Jie Cui S-box
S = (0xfa,0x62,0xa0,0xea,0x81,0xc9,0x2f,0x22,0xe5,0xa9,0xbd,0x1e,0x13,0x4d,0x65,0xc8,0x87,0x17,0xbb,0x88,0xb8,0x45,0x57,0x95,0xf3,0x0b,0x9e,0xd7,0x68,0x11,0x8a,0xb2,0x3b,0xa8,0x1d,0xa5,0xf8,0x5d,0x3e,0x8f,0xd2,0x0e,0x80,0x06,0x54,0x4b,0x3d,0x6e,0xf0,0x28,0x02,0x6d,0xe9,0x63,0x32,0x23,0x82,0x1c,0xc3,0xb3,0x15,0xb4,0x0f,0xc7,0x12,0x39,0x19,0x58,0x7c,0x99,0xa1,0x26,0x89,0xb7,0x77,0xc2,0xd5,0x66,0x73,0xdd,0xbf,0x40,0x72,0x0d,0x4a,0x97,0x5c,0x2b,0xfd,0xbe,0x6b,0xd1,0x44,0x9a,0x69,0x0a,0x75,0x6f,0x70,0x16,0xeb,0xfb,0xba,0x33,0x36,0x3f,0x78,0x21,0x74,0x2e,0xb1,0x8e,0x5b,0x7b,0x7a,0xad,0x4e,0x7e,0xaf,0xa4,0xf6,0x10,0xb5,0xc1,0x48,0xf1,0x3c,0xa6,0x09,0xe7,0xce,0x8b,0x24,0x20,0xde,0xd4,0x9f,0xae,0x79,0x07,0x61,0xa2,0xdb,0x5e,0xd8,0x4c,0xee,0xed,0x7d,0xc6,0x71,0xfe,0x29,0xff,0x31,0xc5,0x59,0xfc,0xda,0x98,0x2a,0x6a,0xe6,0x42,0xb0,0xcd,0x04,0x91,0xf9,0x14,0x47,0x27,0x83,0x34,0x1f,0xec,0x2d,0x18,0x5a,0x76,0x60,0xe4,0x50,0x25,0x3a,0x56,0x03,0xd9,0x85,0x6c,0x90,0xe8,0x41,0x94,0x92,0x30,0x05,0x38,0x84,0xd6,0xca,0x51,0xac,0x43,0x8c,0xd3,0xa7,0xc0,0x0c,0x1a,0x67,0xab,0xd0,0xf4,0x1b,0xbc,0x8d,0xf7,0x5f,0xaa,0x08,0x46,0x35,0xb6,0x00,0xe0,0x9b,0xcf,0xef,0x86,0x9d,0x4f,0xe3,0xdf,0xe1,0x93,0xb9,0xe2,0x53,0x64,0x7f,0xcb,0xcc,0x01,0x9c,0x2c,0xa3,0xf5,0x52,0x55,0x49,0x96,0xdc,0xc4,0xf2,0x37)
Si = (0xe0,0xf3,0x32,0xba,0xa6,0xc4,0x2b,0x8b,0xdc,0x80,0x5f,0x19,0xd0,0x53,0x29,0x3e,0x79,0x1d,0x40,0x0c,0xa9,0x3c,0x63,0x11,0xb1,0x42,0xd1,0xd6,0x39,0x22,0x0b,0xae,0x85,0x6b,0x07,0x37,0x84,0xb7,0x47,0xab,0x31,0x98,0xa0,0x57,0xf5,0xb0,0x6d,0x06,0xc3,0x9a,0x36,0x67,0xad,0xde,0x68,0xff,0xc5,0x41,0xb8,0x20,0x7e,0x2e,0x26,0x69,0x51,0xc0,0xa3,0xcb,0x5c,0x15,0xdd,0xaa,0x7c,0xfa,0x54,0x2d,0x91,0x0d,0x74,0xe7,0xb6,0xc9,0xf8,0xee,0x2c,0xf9,0xb9,0x16,0x43,0x9c,0xb2,0x70,0x56,0x25,0x8f,0xda,0xb4,0x8c,0x01,0x35,0xef,0x0e,0x4d,0xd2,0x1c,0x5e,0xa1,0x5a,0xbd,0x33,0x2f,0x61,0x62,0x96,0x52,0x4e,0x6c,0x60,0xb3,0x4a,0x6a,0x8a,0x72,0x71,0x44,0x94,0x75,0xf0,0x2a,0x04,0x38,0xac,0xc6,0xbc,0xe5,0x10,0x13,0x48,0x1e,0x83,0xcc,0xd8,0x6f,0x27,0xbe,0xa7,0xc2,0xeb,0xc1,0x17,0xfb,0x55,0x9f,0x45,0x5d,0xe2,0xf4,0xe6,0x1a,0x88,0x02,0x46,0x8d,0xf6,0x77,0x23,0x7f,0xce,0x21,0x09,0xdb,0xd3,0xca,0x73,0x89,0x76,0xa4,0x6e,0x1f,0x3b,0x3d,0x7a,0xdf,0x49,0x14,0xec,0x66,0x12,0xd7,0x0a,0x59,0x50,0xcf,0x7b,0x4b,0x3a,0xfd,0x9b,0x95,0x3f,0x0f,0x05,0xc8,0xf1,0xf2,0xa5,0x82,0xe3,0xd4,0x5b,0x28,0xcd,0x87,0x4c,0xc7,0x1b,0x90,0xbb,0x9e,0x8e,0xfc,0x4f,0x86,0xe9,0xe1,0xea,0xed,0xe8,0xb5,0x08,0xa2,0x81,0xbf,0x34,0x03,0x64,0xaf,0x93,0x92,0xe4,0x30,0x7d,0xfe,0x18,0xd5,0xf7,0x78,0xd9,0x24,0xa8,0x00,0x65,0x9d,0x58,0x97,0x99)

# Nitaj S-box
# S = [0x36, 0x94, 0x89, 0xcb, 0x77, 0x96, 0xd2, 0x4b, 0x05, 0xf7, 0xab, 0xc5, 0x6d, 0xa1, 0xd6, 0x5b, 0x61, 0x91, 0xe7, 0xd0, 0x1f, 0xa9, 0x43, 0x1d, 0x9b, 0xbe, 0xf4, 0xb8, 0x42, 0x63, 0x87, 0xbb, 0x02, 0x58, 0xc3, 0xac, 0xe4, 0xe5, 0xeb, 0xb3, 0x83, 0x70, 0x64, 0x20, 0x57, 0x08, 0x60, 0x85, 0x2f, 0x90, 0x07, 0xee, 0x23, 0x33, 0x81, 0x12, 0x14, 0xea, 0x39, 0x21, 0x62, 0xcd, 0x28, 0x2e, 0x2c, 0xf6, 0xdd, 0x25, 0xbc, 0x11, 0xa7, 0xe6, 0xfd, 0x53, 0x98, 0x9c, 0x38, 0x1b, 0x5c, 0x54, 0x75, 0x95, 0x26, 0x00, 0x09, 0x3b, 0x44, 0x9d, 0x15, 0x5d, 0x1c, 0x9a, 0x5f, 0xc9, 0xa4, 0x78, 0x5a, 0xf3, 0x0b, 0x0c, 0xe9, 0x0a, 0x06, 0x3e, 0x71, 0xe1, 0xfa, 0xf5, 0x7f, 0x65, 0x19, 0xdf, 0x8e, 0x32, 0xfb, 0x74, 0x50, 0xd9, 0x72, 0x24, 0x45, 0x0f, 0x69, 0x76, 0xda, 0x41, 0xb1, 0xdb, 0x79, 0x80, 0x3a, 0x49, 0xe8, 0xbf, 0x73, 0x16, 0x18, 0x8d, 0xce, 0xa3, 0x0e, 0xc6, 0xef, 0xe3, 0xd7, 0x99, 0x6e, 0x35, 0xfc, 0xaf, 0xa2, 0xc1, 0xde, 0xc2, 0x1e, 0xd1, 0x6c, 0xf1, 0xaa, 0x7e, 0x8c, 0x52, 0xd4, 0x4a, 0x7c, 0x93, 0xf0, 0xe2, 0xd8, 0x66, 0x04, 0x9e, 0x84, 0x3c, 0x13, 0xae, 0x86, 0x88, 0xa5, 0x68, 0xd3, 0x37, 0x3d, 0x56, 0x6a, 0x5e, 0x7a, 0xad, 0xc8, 0xb2, 0x40, 0x67, 0x0d, 0xb7, 0x46, 0x7d, 0xa6, 0x82, 0x6b, 0x3f, 0x34, 0x22, 0xb0, 0xc0, 0x29, 0x4e, 0x59, 0x7b, 0xc7, 0x31, 0xba, 0x47, 0xfe, 0xc4, 0xd5, 0xe0, 0x92, 0xb9, 0x10, 0xa0, 0x8b, 0xed, 0x55, 0x97, 0xca, 0x1a, 0xf9, 0x2a, 0xcc, 0xf2, 0x4c, 0x51, 0x03, 0x30, 0x4d, 0xf8, 0xb4, 0xbd, 0xcf, 0x48, 0xec, 0x2b, 0x9f, 0xff, 0x27, 0x17, 0xb6, 0x8f, 0x8a, 0xb5, 0x01, 0xa8, 0x6f, 0x4f, 0xdc, 0x2d]
# Si = [0x53, 0xfa, 0x20, 0xe8, 0xaa, 0x08, 0x66, 0x32, 0x2d, 0x54, 0x65, 0x62, 0x63, 0xc0, 0x8c, 0x79, 0xda, 0x45, 0x37, 0xae, 0x38, 0x58, 0x87, 0xf5, 0x88, 0x6e, 0xe1, 0x4d, 0x5a, 0x17, 0x9a, 0x14, 0x2b, 0x3b, 0xc9, 0x34, 0x77, 0x43, 0x52, 0xf4, 0x3e, 0xcc, 0xe3, 0xf1, 0x40, 0xff, 0x3f, 0x30, 0xe9, 0xd1, 0x71, 0x35, 0xc8, 0x93, 0x00, 0xb5, 0x4c, 0x3a, 0x82, 0x55, 0xad, 0xb6, 0x67, 0xc7, 0xbe, 0x7d, 0x1c, 0x16, 0x56, 0x78, 0xc2, 0xd3, 0xef, 0x83, 0xa3, 0x07, 0xe6, 0xea, 0xcd, 0xfd, 0x74, 0xe7, 0xa1, 0x49, 0x4f, 0xde, 0xb7, 0x2c, 0x21, 0xce, 0x60, 0x0f, 0x4e, 0x59, 0xb9, 0x5c, 0x2e, 0x10, 0x3c, 0x1d, 0x2a, 0x6d, 0xa9, 0xbf, 0xb3, 0x7a, 0xb8, 0xc6, 0x9c, 0x0c, 0x92, 0xfc, 0x29, 0x68, 0x76, 0x86, 0x73, 0x50, 0x7b, 0x04, 0x5f, 0x80, 0xba, 0xcf, 0xa4, 0xc3, 0x9f, 0x6c, 0x81, 0x36, 0xc5, 0x28, 0xac, 0x2f, 0xb0, 0x1e, 0xb1, 0x02, 0xf8, 0xdc, 0xa0, 0x89, 0x70, 0xf7, 0x31, 0x11, 0xd8, 0xa5, 0x01, 0x51, 0x05, 0xdf, 0x4a, 0x91, 0x5b, 0x18, 0x4b, 0x57, 0xab, 0xf2, 0xdb, 0x0d, 0x96, 0x8b, 0x5e, 0xb2, 0xc4, 0x46, 0xfb, 0x15, 0x9e, 0x0a, 0x23, 0xbb, 0xaf, 0x95, 0xca, 0x7e, 0xbd, 0x27, 0xec, 0xf9, 0xf6, 0xc1, 0x1b, 0xd9, 0xd2, 0x1f, 0x44, 0xed, 0x19, 0x85, 0xcb, 0x97, 0x99, 0x22, 0xd5, 0x0b, 0x8d, 0xd0, 0xbc, 0x5d, 0xe0, 0x03, 0xe4, 0x3d, 0x8a, 0xee, 0x13, 0x9b, 0x06, 0xb4, 0xa2, 0xd6, 0x0e, 0x90, 0xa8, 0x75, 0x7c, 0x7f, 0xfe, 0x42, 0x98, 0x6f, 0xd7, 0x69, 0xa7, 0x8f, 0x24, 0x25, 0x47, 0x12, 0x84, 0x64, 0x39, 0x26, 0xf0, 0xdd, 0x33, 0x8e, 0xa6, 0x9d, 0xe5, 0x61, 0x1a, 0x6b, 0x41, 0x09, 0xeb, 0xe2, 0x6a, 0x72, 0x94, 0x48, 0xd4, 0xf3]

# RIJNDAEL S-box and Inverse S-box (S is for Substitution)
# S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
# Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]

def split_hex(n):
    """Split the hex numerotation into two hex numbers"""
    if n < 0 or n > 255:
        print("Number out of bound")
        return None

    l = n & 0xf
    h = (n >> 4) & 0xf

    return l, h

def apply_s_box(Sbox, n):
    """Apply S Box function to number n"""
    l, h = split_hex(n)
    return Sbox[16 * h + l]

def calcul(Sbox, Isbox, a, b, x):
    """Calculate left part of the BCT formula"""
    temp1 = apply_s_box(Sbox, x) ^ b
    temp1 = apply_s_box(Isbox, temp1)

    temp2 = x ^ a
    temp2 = apply_s_box(Sbox, temp2) ^ b
    temp2 = apply_s_box(Isbox, temp2)

    resultat = temp1 ^ temp2
    return temp1 ^ temp2

def stat(table):
    print("Boomerang uniformity : ", int(np.amax(table[1:][1:])))
    L = np.zeros(257)
    for a in range(256):
        for b in range(256):
            L[int(table[a][b])] += 1
    for i in range(len(L)):
        number = L[i]
        if number > 0:
            print("The value ", i, " appears ", L[i], " times\n")
    return

def main():
    """Calculate BCT of the S-box"""
    table = np.zeros((256, 256))
    for a in range(256):
        for b in range(256):
            for x in range(256):
                cal = calcul(S, Si, a, b, x)
                if cal == a:
                    table[a][b] += 1
    np.savetxt("bct.csv", table, delimiter=",")
    stat(table)
    return

if __name__ == '__main__':
    main()